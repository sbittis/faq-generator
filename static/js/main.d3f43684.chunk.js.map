{"version":3,"sources":["general-information/GeneralInformation.js","question/Question.js","questions/Questions.js","App.js","serviceWorker.js","index.js"],"names":["GeneralInformation","id","TextField","label","value","this","props","title","onChange","variant","fullWidth","React","Component","Question","className","question","onChangeQuestion","multiline","rows","answer","onChangeAnswer","tags","onChangeTags","Button","color","onClick","onRemoveQuestion","Questions","state","questions","handleChangeQuestion","bind","handleChangeAnswer","newList","push","setState","index","event","handleChange","target","propName","map","i","splice","key","handleChangeTags","handleRemoveQuestion","addQuestion","App","handleChangeQuestions","handleChangeGeneralInformation","import","createRef","result","console","log","myData","filename","toLowerCase","replace","json","JSON","stringify","blob","Blob","type","href","URL","createObjectURL","link","document","createElement","download","body","appendChild","click","removeChild","getElementById","files","reader","FileReader","onload","e","a","newState","parse","current","setQuestions","readAsText","htmlText","replaceAll","fetch","then","response","text","htmlOutputText","prepareOutput","generate","save","openImportDialog","name","accept","ref","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d3f43684.chunk.js","sourcesContent":["import React from 'react';\r\nimport { TextField } from '@material-ui/core';\r\nimport './GeneralInformation.css';\r\n\r\nclass GeneralInformation extends React.Component {\r\n    render() {\r\n      return (\r\n        <div id=\"GeneralInformation\">\r\n            <TextField id=\"title\" label=\"Title of your FAQ\" value={this.props.title} onChange={this.props.onChange} variant=\"outlined\" fullWidth={true} />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default GeneralInformation;","import React from 'react';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport './Question.css';\r\n\r\nclass Question extends React.Component {\r\n    render() {\r\n      return (\r\n        <div className=\"question-block\">\r\n          <TextField className=\"question\" label=\"Question*\" value={this.props.question} onChange={this.props.onChangeQuestion} variant=\"outlined\" fullWidth={true} />\r\n          <TextField className=\"answer\" label=\"Answer*\" multiline rows={4} value={this.props.answer} onChange={this.props.onChangeAnswer} variant=\"outlined\" fullWidth={true} />\r\n          <TextField className=\"tags\" label=\"Tags (additional keywords for searching, comma-separated)\" value={this.props.tags} onChange={this.props.onChangeTags} variant=\"outlined\" fullWidth={true} />\r\n          <Button variant=\"outlined\" color=\"primary\" className=\"removeButton\" onClick={this.props.onRemoveQuestion}>Remove this question</Button>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default Question;","import { Button } from '@material-ui/core';\r\nimport React from 'react';\r\nimport Question from '../question/Question';\r\nimport './Questions.css';\r\n\r\nclass Questions extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            questions: props.questions ?? []\r\n        };\r\n        this.handleChangeQuestion.bind(this);\r\n        this.handleChangeAnswer.bind(this);\r\n    }\r\n  \r\n    addQuestion() {\r\n        const newList = this.state.questions;\r\n        newList.push({question: \"\", answer: \"\", tags: \"\"});\r\n        this.setState({ questions: newList });\r\n    }\r\n\r\n    setQuestions(questions) {\r\n        this.setState({\r\n            questions: questions\r\n        });\r\n    }\r\n\r\n    handleChangeQuestion(index, event) {\r\n        this.handleChange(index, \"question\", event.target.value);\r\n    }\r\n\r\n    handleChangeAnswer(index, event) {\r\n        this.handleChange(index, \"answer\", event.target.value); \r\n    }\r\n\r\n    handleChangeTags(index, event) {\r\n        this.handleChange(index, \"tags\", event.target.value);\r\n    }\r\n\r\n    handleChange(index, propName, value) {\r\n        const newList = this.state.questions.map((question, i) => {\r\n            if (i === index) {\r\n                question[propName] = value;\r\n            }\r\n            return question;\r\n        });\r\n        this.setState({ questions: newList });\r\n        this.props.onChange(this.state);\r\n    }\r\n\r\n    handleRemoveQuestion(index, event) {\r\n        const newList = this.state.questions;\r\n        newList.splice(index, 1);\r\n        this.setState({ questions: newList });\r\n    }\r\n  \r\n    render() {\r\n        return (\r\n            <div className=\"questions\">\r\n                <h2>Questions</h2>\r\n                {this.state.questions.map((question, i) => {\r\n                    return (<Question key={i}\r\n                                question={question.question}\r\n                                answer={question.answer}\r\n                                tags={question.tags}\r\n                                onChangeQuestion={(event) => this.handleChangeQuestion(i, event)}\r\n                                onChangeAnswer={(event) => this.handleChangeAnswer(i, event)}\r\n                                onChangeTags={(event) => this.handleChangeTags(i, event)}\r\n                                onRemoveQuestion={(event) => this.handleRemoveQuestion(i, event)} />);\r\n                })}\r\n                <Button variant=\"outlined\" color=\"primary\" onClick={() => { this.addQuestion() }}>Add Question</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Questions;","import React from 'react';\nimport { Button } from '@material-ui/core';\n\nimport './App.css';\nimport GeneralInformation from './general-information/GeneralInformation';\nimport Questions from './questions/Questions';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: \"\",\n      questions: []\n    };\n\n    this.handleChangeQuestions.bind(this);\n    this.handleChangeGeneralInformation.bind(this);\n    this.import.bind(this);\n\n    this.questions = React.createRef();\n  }\n\n  handleChangeQuestions(result) {\n    const state = this.state;\n    state.questions = result.questions;\n    this.setState(state);\n  }\n\n  handleChangeGeneralInformation(event) {\n    const state = this.state;\n    state.title = event.target.value;\n    this.setState(state);\n  }\n\n  save() {\n    console.log(this.state);\n    const myData = this.state;\n    const filename = this.state.title.toLowerCase().replace(\" \", \"_\") + \".faq\";\n    const json = JSON.stringify(myData);\n    const blob = new Blob([json],{type:'application/json'});\n    const href = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = href;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n\n  openImportDialog() {\n    document.getElementById(\"import\").click();\n  }\n\n  import(event) {\n    if (event.target.files) {\n      var reader = new FileReader();\n      reader.onload = async e => { \n        var newState = JSON.parse(e.target.result);\n        this.setState(newState);\n        this.questions.current.setQuestions(newState.questions);\n      };\n      reader.readAsText(event.target.files[0]);\n    }\n  }\n\n  setNewState() {\n    this.setState(\"newState\");\n  }\n\n  prepareOutput(htmlText) {\n    return htmlText\n      .replace(\"\\\"##questions##\\\"\", JSON.stringify(this.state.questions))\n      .replaceAll(\"##title##\", this.state.title);\n  }\n\n  generate() {\n    fetch('/template.html')\n    .then((response) => response.text())\n    .then(htmlText => {\n      const htmlOutputText = this.prepareOutput(htmlText);\n      const filename = this.state.title.toLowerCase().replace(\" \", \"_\") + \".html\";\n      const blob = new Blob([htmlOutputText],{type:'text/html'});\n      const href = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = href;\n      link.download = filename;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    })  \n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>FAQ Generator</h1>\n        </header>\n        <br/>\n        <Button variant=\"outlined\" color=\"primary\" onClick={() => { this.generate() }}>Generate FAQ page</Button> &nbsp;\n        <Button variant=\"outlined\" color=\"secondary\" onClick={() => { this.save() }}>Save work</Button> &nbsp;\n        <Button variant=\"outlined\" color=\"secondary\" onClick={() => { this.openImportDialog() }}>Import...</Button>\n        <input id=\"import\" type=\"file\" name=\"file\" accept=\".faq\" onChange={(event) => this.import(event)}/>\n        <GeneralInformation title={this.state.title} onChange={(event) => this.handleChangeGeneralInformation(event)} />\n        <br/>\n        <Questions ref={this.questions} onChange={(result) => this.handleChangeQuestions(result)} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}